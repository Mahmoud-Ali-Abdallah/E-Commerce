@page "/cart"

@inject eCommerce.UseCases.ShoppingCardScreen.IViewShoppingCartUseCase viewShoppingCartUseCase

<h3>Shopping Card</h3>
<br />
@if (order != null && order.LineItems != null && order.LineItems.Count > 0)
{
    <div class="row">
        <div class="col-6">
            <ul>

                @for (int i = 0; i < order.LineItems.Count; i++)
                {
                    // Line Item
                    <LineItemComponent 
                                       OnDeleteProduct="HandleDeleteProduct"
                                       OnUpdateProduct="HandleUpdateQuantity"
                                       lineItem="order.LineItems[i]"></LineItemComponent>

                    if (i < order.LineItems.Count - 1)
                    {
                        <li style="list-style:none">
                            <hr />
                        </li>

                    }

                }


            </ul>
        </div>
        <div class="col">
            @* Order Summary *@
            <OrderSummaryComponent Order="order"></OrderSummaryComponent>
        </div>
    </div>
}

@code {

    private Order order;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            order = await viewShoppingCartUseCase.Execute();
            StateHasChanged();
        }
    }

    private void HandleDeleteProduct(Order order)
    {
        this.order = order;
    }

    private void HandleUpdateQuantity(Order order)
    {
        this.order = order;
    }

}
